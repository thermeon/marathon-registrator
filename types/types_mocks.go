// Automatically generated by MockGen. DO NOT EDIT!
// Source: types/types.go

package types

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of SchedulerAdapter interface
type MockSchedulerAdapter struct {
	ctrl     *gomock.Controller
	recorder *_MockSchedulerAdapterRecorder
}

// Recorder for MockSchedulerAdapter (not exported)
type _MockSchedulerAdapterRecorder struct {
	mock *MockSchedulerAdapter
}

func NewMockSchedulerAdapter(ctrl *gomock.Controller) *MockSchedulerAdapter {
	mock := &MockSchedulerAdapter{ctrl: ctrl}
	mock.recorder = &_MockSchedulerAdapterRecorder{mock}
	return mock
}

func (_m *MockSchedulerAdapter) EXPECT() *_MockSchedulerAdapterRecorder {
	return _m.recorder
}

func (_m *MockSchedulerAdapter) Services() ([]*ServiceGroup, error) {
	ret := _m.ctrl.Call(_m, "Services")
	ret0, _ := ret[0].([]*ServiceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSchedulerAdapterRecorder) Services() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Services")
}

func (_m *MockSchedulerAdapter) ListenForEvents(channel EventsChannel) error {
	ret := _m.ctrl.Call(_m, "ListenForEvents", channel)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSchedulerAdapterRecorder) ListenForEvents(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListenForEvents", arg0)
}

// Mock of RegistryAdapter interface
type MockRegistryAdapter struct {
	ctrl     *gomock.Controller
	recorder *_MockRegistryAdapterRecorder
}

// Recorder for MockRegistryAdapter (not exported)
type _MockRegistryAdapterRecorder struct {
	mock *MockRegistryAdapter
}

func NewMockRegistryAdapter(ctrl *gomock.Controller) *MockRegistryAdapter {
	mock := &MockRegistryAdapter{ctrl: ctrl}
	mock.recorder = &_MockRegistryAdapterRecorder{mock}
	return mock
}

func (_m *MockRegistryAdapter) EXPECT() *_MockRegistryAdapterRecorder {
	return _m.recorder
}

func (_m *MockRegistryAdapter) Services() ([]*ServiceGroup, error) {
	ret := _m.ctrl.Call(_m, "Services")
	ret0, _ := ret[0].([]*ServiceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRegistryAdapterRecorder) Services() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Services")
}

func (_m *MockRegistryAdapter) Ping() error {
	ret := _m.ctrl.Call(_m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRegistryAdapterRecorder) Ping() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Ping")
}

func (_m *MockRegistryAdapter) Register(group *ServiceGroup) error {
	ret := _m.ctrl.Call(_m, "Register", group)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRegistryAdapterRecorder) Register(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Register", arg0)
}

func (_m *MockRegistryAdapter) Deregister(group *ServiceGroup) error {
	ret := _m.ctrl.Call(_m, "Deregister", group)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRegistryAdapterRecorder) Deregister(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Deregister", arg0)
}

func (_m *MockRegistryAdapter) AdvertiseAddr() (string, error) {
	ret := _m.ctrl.Call(_m, "AdvertiseAddr")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRegistryAdapterRecorder) AdvertiseAddr() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AdvertiseAddr")
}
